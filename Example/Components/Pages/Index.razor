@page "/"
@using System.Security.Authentication
@using System.Runtime.Serialization
@inject ClientLogger ClientLogger

<PageTitle>Index</PageTitle>
<RadzenRow Gap="5" RowGap="5">
    <RadzenColumn Size="12">
        <RadzenText Text="Сервис для создания  исключений" TextStyle="TextStyle.H4" TagName="TagName.H2" class="mt-3"></RadzenText>
        <RadzenText Text="Поможет продемонстрировать работоспособность  мониторинговой системы" TextStyle="TextStyle.Body1" TagName="TagName.Auto" class="mt-4" Style="font-size: 20px; line-height: 24px"></RadzenText>
        <RadzenRow>
            
            <RadzenStack Gap="1rem" Style="height: 100%;">
                <RadzenStack>
            
                    <RadzenDataGrid TItem="Exception" Data="Exceptions" RowClick="@OnClick"
                                    ColumnWidth="200px" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@_selected>
                        <Columns>
                            <RadzenDataGridColumn Property="Message" Title="Описание"/>
                            <RadzenDataGridColumn Property="Message" Title="Тип">
                                <Template Context="exception">
                                    @(exception.GetType())
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
            
                </RadzenStack>
            </RadzenStack>
        </RadzenRow>
    </RadzenColumn>
</RadzenRow>


@code {

    private List<Exception> Exceptions =
    [
        new Exception("Общее исключение"),
        new NullReferenceException("Разыменование указателя null"),
        new AuthenticationException("Сбой проверки подлинности"),
        new SerializationException("Ошибка сериализации"),
        new IndexOutOfRangeException("Выход за границы массива"),
        new EkasClientException("Ошибка на клиенте"),
        new EkasClientException("Другая ошибка на клиенте...")
    ];

    private IList<Exception> _selected;

    private async Task OnClick(DataGridRowMouseEventArgs<Exception> selectedException)
    {
        try
        {
            throw selectedException.Data;
        }
        catch (Exception e)
        {
            await ClientLogger.Log(LogLevel.Error, e);
            NotificationService.Notify(new NotificationMessage
            {
                Duration = 1500,
                Severity = NotificationSeverity.Error,
                Detail = @e.StackTrace,
                Summary = e.Message
            });
        }
    }
}